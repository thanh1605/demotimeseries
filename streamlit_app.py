import streamlit as st
import tensorflow as tf
import numpy as np
import pandas as pd
import requests
import io
from PIL import Image
from datetime import datetime, timedelta
from meteostat import Stations, Daily
import h5py
import os

# --- C·∫•u h√¨nh ---
st.set_page_config("Live Landfall Predictor", layout="wide")
st.title("üå™Ô∏è D·ª± ƒëo√°n Landfall v·ªõi D·ªØ li·ªáu Th·ªùi Gian Th·ª±c")

# ƒê·ªãnh nghƒ©a mapping name ‚Üí file path
MODEL_DIR = "models"
model_files = {
    "Model A (LSTM+CNN)": "lstm_cnn_landfall_model.h5",
    "Model B (RNN)":        "rnn_landfall_model.h5",
    "Model C (CNN only)":   "cnn_landfall_model.h5",
}

@st.cache_resource
def load_models():
    models = {}
    for display_name, fname in model_files.items():
        path = os.path.join(MODEL_DIR, fname)
        models[display_name] = tf.keras.models.load_model(path)
    return models

# T·∫£i t·∫•t c·∫£ model l√™n memory
models = load_models()

# Sidebar ch·ªçn model
st.sidebar.header("Ch·ªçn Model")
model_name = st.sidebar.selectbox("B·∫°n mu·ªën d√πng model n√†o?", list(models.keys()))

# L·∫•y ƒë√∫ng model
model = models[model_name]


# --- Sidebar: ch·ªçn station & th·ªùi ƒëi·ªÉm ---
st.sidebar.header("C·∫•u h√¨nh ngu·ªìn d·ªØ li·ªáu")
station_id = st.sidebar.text_input("Station ID (Meteostat)", value="10637")  
# v√≠ d·ª• 10637 = Tokyo
date = st.sidebar.date_input("Ch·ªçn ng√†y", datetime.utcnow().date() - timedelta(days=1))
fetch = st.sidebar.button("üîÑ L·∫•y d·ªØ li·ªáu v√† D·ª± ƒëo√°n")

def fetch_station_data(station_id, date):
    """Tr·∫£ v·ªÅ DataFrame daily cho station v√† ng√†y ƒë√£ ch·ªçn."""
    stations = Stations()
    station = stations.id(station_id).fetch(1)
    df = Daily(station, start=date, end=date).fetch()
    return df

def fetch_goes_image(band="M3", dt=None):
    """
    L·∫•y ·∫£nh GOES t·ª´ AWS Public Bucket.
    Band M3 ~ h·ªìng ngo·∫°i g·∫ßn, dt: datetime UTC.
    """
    # V√≠ d·ª• URL template (AWS): 
    # https://noaa-goes18.s3.amazonaws.com/ABI/FDCC/2025/175/00/OR_ABI-L2-FDCC-M3_G18_s20251750000_e20251751500_c20251751503.nc
    # ·ªû ƒë√¢y ta s·ª≠ d·ª•ng service demo l·∫•y PNG nh·ªè (GOES-16 GeoColor)
    url = (
        "https://cdn.star.nesdis.noaa.gov/GOES16/ABI/FD/GEOCOLOR/2025/{}{:02d}{:02d}/"
        "GOES16-FD-GEOCOLOR-5000x3000-{}.jpg"
    ).format(dt.year, dt.timetuple().tm_yday, dt.hour, dt.strftime("%Y%j%H%M"))
    resp = requests.get(url)
    if resp.status_code != 200:
        raise ValueError("Kh√¥ng t·∫£i ƒë∆∞·ª£c ·∫£nh GOES")
    img = Image.open(io.BytesIO(resp.content))
    return img

if fetch:
    # 1. L·∫•y s·ªë li·ªáu tr·∫°m
    try:
        df_station = fetch_station_data(station_id, date)
        st.subheader("üìä D·ªØ li·ªáu M·∫∑t ƒë·∫•t:")
        st.dataframe(df_station)
        # Gi·∫£ s·ª≠ model c·∫ßn 4 bi·∫øn: t2m, prcp, wdir, wspd
        features = df_station[["tavg","prcp","wdir","wspd"]].iloc[0].fillna(0).to_numpy()
    except Exception as e:
        st.error(f"Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu tr·∫°m: {e}")
        st.stop()

    # 2. L·∫•y ·∫£nh v·ªá tinh/radar
    try:
        dt = datetime.utcnow().replace(minute=0, second=0, microsecond=0)
        img = fetch_goes_image(dt=dt)
        st.subheader("üõ∞Ô∏è ·∫¢nh GOES-16 GeoColor (UTC {})".format(dt.strftime("%Y-%m-%d %H:%M")))
        st.image(img, use_column_width=True)
        # ti·ªÅn x·ª≠ l√Ω gi·ªëng app tr∆∞·ªõc: resize, normalize
        arr = np.array(img.resize((224,224))) / 255.0
        img_input = arr[np.newaxis,...]
    except Exception as e:
        st.error(f"Kh√¥ng t·∫£i ƒë∆∞·ª£c ·∫£nh v·ªá tinh: {e}")
        st.stop()

    # 3. Ch·∫°y model
    num_input = features.reshape(1,-1).astype(np.float32)
    pred = model.predict([img_input, num_input])[0,0]
    st.success(f"üéØ X√°c su·∫•t ƒëi v√†o ƒë·∫•t li·ªÅn ~ **{pred*100:.1f}%**")
